classDiagram
  direction LR
  class Mesh~class~ {
    see mesh...*
  }
  class MetricBase~Dimension~ {
    +bool is_metric$
    +Dimension Dim$
    #real_t dx_min
    #const real_t nx1
    #const real_t nx2
    #const real_t nx3
    #const real_t x1_min
    #const real_t x1_max
    #const real_t x2_min
    #const real_t x2_max
    #const real_t x3_min
    #const real_t x3_max
    +find_dxMin() real_t
    +totVolume() real_t
    +dxMin() real_t
    +set_dxMin(real_t dxmin) void
  }

  class Minkowski~Dimension~ {
    -const real_t dx
    -const real_t dx_inv
    +const char *       Label$
    +Dimension PrtlDim$
    +ntt\:\:Metric MetricType$
    +ntt\:\:Coord CoordType$
    +find_dxMin() real_t override
    +totVolume() real_t override
    +sqrt_det_h(coord_t~D~ &) Inline auto
  }
  class Spherical~Dimension~ {
    -const real_t dr
    -const real_t dtheta
    -const real_t dphi
    -const real_t dr_inv
    -const real_t dtheta_inv
    -const real_t dphi_inv
    -const bool small_angle
    +const char *       Label$
    +Dimension PrtlDim$
    +ntt\:\:Metric MetricType$
    +ntt\:\:Coord CoordType$
    +find_dxMin() real_t override
    +totVolume() real_t override
    +sqrt_det_h(coord_t~D~ & x) Inline auto
    +sqrt_det_h_tilde(coord_t~D~ & x) Inline auto
    +polar_area(real_t & x1) Inline auto
  }
  class QSpherical~Dimension~ {
    -const real_t r0
    -const real_t h
    -const real_t chi_min
    -const real_t eta_min
    -const real_t phi_min
    -const real_t dchi
    -const real_t deta
    -const real_t dphi
    -const real_t dchi_inv
    -const real_t deta_inv
    -const real_t dphi_inv
    -const bool small_angle
    +const char *       Label$
    +Dimension PrtlDim$
    +ntt\:\:Metric MetricType$
    +ntt\:\:Coord CoordType$
    +find_dxMin() real_t override
    +totVolume() real_t override
    +sqrt_det_h(coord_t~D~ & x) Inline auto
    +sqrt_det_h_tilde(coord_t~D~ & x) Inline auto
    +polar_area(real_t & x1) Inline auto
    -dtheta_deta(real_t & eta) Inline auto
    -eta2theta(real_t & eta) Inline auto
    -theta2eta(real_t & theta) Inline auto
  }
  class KerrSchild~Dimension~ {
    -const real_t a
    -const real_t rg_
    -const real_t rh_
    -const real_t dr
    -const real_t dtheta
    -const real_t dphi
    -const real_t dr_inv
    -const real_t dtheta_inv
    -const real_t dphi_inv
    +const char *       Label$
    +Dimension PrtlDim$
    +ntt\:\:Coord CoordType$
    +ntt\:\:Metric MetricType$
    -Delta(real_t & r) Inline auto
    -Sigma(real_t & r, real_t & theta) Inline auto
    -A(real_t & r, real_t & theta) Inline auto
    -z(real_t & r, real_t & theta) Inline auto
    +spin() Inline auto
    +rhorizon() Inline auto
    +rg() Inline auto
    +find_dxMin() real_t override
    +totVolume() real_t override
    +alpha(coord_t~D~ & x) Inline auto
    +dr_alpha(coord_t~D~ & x) Inline auto
    +dt_alpha(coord_t~D~ & x) Inline auto
    +beta1(coord_t~D~ & x) Inline auto
    +dr_beta1(coord_t~D~ & x) Inline auto
    +dt_beta1(coord_t~D~ & x) Inline auto
    +dr_h11(coord_t~D~ & x) Inline auto
    +dr_h22(coord_t~D~ & x) Inline auto
    +dr_h33(coord_t~D~ & x) Inline auto
    +dr_h13(coord_t~D~ & x) Inline auto
    +dt_Sigma(real_t & theta) Inline auto
    +dt_A(real_t & r, real_t & theta) Inline auto
    +dt_h11(coord_t~D~ & x) Inline auto
    +dt_h22(coord_t~D~ & x) Inline auto
    +dt_h33(coord_t~D~ & x) Inline auto
    +dt_h13(coord_t~D~ & x) Inline auto
    +sqrt_det_h(coord_t~D~ & x) Inline auto
    +sqrt_det_h_tilde(coord_t~D~ & x) Inline auto
    +polar_area(real_t & x1) Inline auto
  }
  class QKerrSchild~Dimension~ {
    -const real_t a
    -const real_t rg_
    -const real_t rh_
    -const real_t r0
    -const real_t h0
    -const real_t chi_min
    -const real_t eta_min
    -const real_t phi_min
    -const real_t dchi
    -const real_t deta
    -const real_t dphi
    -const real_t dchi_inv
    -const real_t deta_inv
    -const real_t dphi_inv
    +const char *       Label$
    +Dimension PrtlDim$
    +ntt\:\:Metric MetricType$
    +ntt\:\:Coord CoordType$
    -Delta(real_t & r) Inline auto
    -Sigma(real_t & r, real_t & theta) Inline auto
    -A(real_t & r, real_t & theta) Inline auto
    -z(real_t & r, real_t & theta) Inline auto
    +spin() Inline auto
    +rhorizon() Inline auto
    +rg() Inline auto
    +find_dxMin() real_t override
    +totVolume() real_t override
    +alpha(coord_t~D~ & x) Inline auto
    +dr_alpha(coord_t~D~ & x) Inline auto
    +dt_alpha(coord_t~D~ & x) Inline auto
    +beta1(coord_t~D~ & x) Inline auto
    +dr_beta1(coord_t~D~ & x) Inline auto
    +dt_beta1(coord_t~D~ & x) Inline auto
    +dr_h11(coord_t~D~ & x) Inline auto
    +dr_h22(coord_t~D~ & x) Inline auto
    +dr_h33(coord_t~D~ & x) Inline auto
    +dr_h13(coord_t~D~ & x) Inline auto
    +dt_Sigma(real_t & eta) Inline auto
    +dt_A(real_t & r, real_t & eta) Inline auto
    +dt_h11(coord_t~D~ & x) Inline auto
    +dt_h22(coord_t~D~ & x) Inline auto
    +dt_h33(coord_t~D~ & x) Inline auto
    +dt_h13(coord_t~D~ & x) Inline auto
    +sqrt_det_h(coord_t~D~ & x) Inline auto
    +sqrt_det_h_tilde(coord_t~D~ & x) Inline auto
    +polar_area(real_t & x1) Inline auto
    -dtheta_deta(real_t & eta) Inline auto
    -eta2theta(real_t & eta) Inline auto
    -dx_dt(real_t & eta) Inline auto
    -theta2eta(real_t & theta) Inline auto
  }
  class KerrSchild0~Dimension~ {
    -const real_t dr
    -const real_t dtheta
    -const real_t dphi
    -const real_t dr_inv
    -const real_t dtheta_inv
    -const real_t dphi_inv
    -const real_t a
    -const real_t rg_
    -const real_t rh_
    +const char * Label$
    +Dimension PrtlDim$
    +ntt\:\:Metric MetricType$
    +ntt\:\:Coord CoordType$
    +spin() Inline auto
    +rhorizon() Inline auto
    +rg() Inline auto
    +find_dxMin() real_t override
    +totVolume() real_t override
    +alpha(coord_t~D~ &) Inline auto
    +dr_alpha(coord_t~D~ & x) Inline auto
    +dt_alpha(coord_t~D~ & x) Inline auto
    +beta1(coord_t~D~ &) Inline auto
    +dr_beta1(coord_t~D~ & x) Inline auto
    +dt_beta1(coord_t~D~ & x) Inline auto
    +dr_h11(coord_t~D~ & x) Inline auto
    +dr_h22(coord_t~D~ & x) Inline auto
    +dr_h33(coord_t~D~ & x) Inline auto
    +dr_h13(coord_t~D~ & x) Inline auto
    +dt_h11(coord_t~D~ & x) Inline auto
    +dt_h22(coord_t~D~ & x) Inline auto
    +dt_h33(coord_t~D~ & x) Inline auto
    +dt_h13(coord_t~D~ & x) Inline auto
    +sqrt_det_h(coord_t~D~ & x) Inline auto
    +sqrt_det_h_tilde(coord_t~D~ & x) Inline auto
    +polar_area(real_t & x1) Inline auto
  }

  MetricBase <|-- Minkowski : implements
  MetricBase <|-- Spherical : implements
  MetricBase <|-- QSpherical : implements
  MetricBase <|-- KerrSchild : implements
  MetricBase <|-- QKerrSchild : implements
  MetricBase <|-- KerrSchild0 : implements
  Mesh --* MetricBase : contains

  note "+: public\n-: private\n#: protected\nunderline: static constexpr\nitalic: virtual"
